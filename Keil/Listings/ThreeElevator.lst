C51 COMPILER V9.60.0.0   THREEELEVATOR                                                     05/10/2020 17:38:04 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE THREEELEVATOR
OBJECT MODULE PLACED IN .\Objects\ThreeElevator.obj
COMPILER INVOKED BY: D:\Keil_v5c51\C51\BIN\C51.EXE ThreeElevator.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\L
                    -istings\ThreeElevator.lst) TABS(2) OBJECT(.\Objects\ThreeElevator.obj)

line level    source

   1          #include <reg52.h>
   2          #include<intrins.h>
   3          
   4          sbit DS=P0^5;
   5          sbit SH_CP=P0^4;
   6          sbit ST_CP=P0^6;
   7          
   8          sbit p10=P1^0;
   9          sbit p11=P1^1;
  10          sbit p12=P1^2;
  11          sbit p13=P1^3;
  12          sbit p14=P1^4;
  13          sbit p15=P1^5;
  14          sbit p16=P1^6;
  15          sbit p17=P1^7;
  16          sbit p20=P2^0;
  17          sbit p21=P2^1;
  18          sbit p22=P2^2;
  19          sbit p23=P2^3;
  20          sbit p24=P2^4;
  21          sbit p25=P2^5;
  22          sbit p26=P2^6;
  23          sbit p27=P2^7;
  24          
  25          sbit DS1=P3^0;
  26          sbit DS2=P3^1;
  27          sbit DS3=P3^2;
  28          sbit DS4=P3^3;
  29          sbit DS5=P3^4;
  30          sbit ST_CP2=P3^5;
  31          sbit SH_CP2=P3^6;
  32          sbit P37 = P3^7;
  33          
  34          int Elevator1=0,Elevator2=0;Elevator3=0;
  35          int up1=0,up2=0,up3=0,down1=0,down2=0,down3=0;  
  36          unsigned char e1=0,e2=0,e3=0,e2ae3=0,up=0,down=0;
  37          void delay(int x){
  38   1        while(x>0){x--;}
  39   1      }
  40          
  41          
  42          void display_elevator(){
  43   1      
  44   1         unsigned char  Data;
  45   1         char i=0;
  46   1      
  47   1         P0=Elevator1+1;
  48   1      
  49   1         Data =(Elevator2+1)|((Elevator3+1)<<4);
  50   1      
  51   1        
  52   1         for(i;i<8;i++)
  53   1         {
  54   2              SH_CP = 0; 
C51 COMPILER V9.60.0.0   THREEELEVATOR                                                     05/10/2020 17:38:04 PAGE 2   

  55   2           
  56   2              DS=0x80&Data;
  57   2           
  58   2              Data=_crol_(Data,1); 
  59   2       
  60   2              SH_CP = 1;          
  61   2              _nop_();
  62   2       
  63   2         }  
  64   1         
  65   1         ST_CP = 1;         
  66   1         
  67   1         _nop_();
  68   1         _nop_();
  69   1      
  70   1        
  71   1      }
  72          void display_LED(){
  73   1        int i=0;
  74   1        unsigned char Data1,Data2,Data3,Data4,Data5;
  75   1      
  76   1        Data1=e1^0xff;
  77   1        Data2=e2^0xff;
  78   1        Data3=e3^0xff;
  79   1        Data4=up^0xff;
  80   1        Data5=down^0xff;
  81   1      
  82   1        for(i;i<8;i++)
  83   1        {
  84   2          SH_CP2 = 0; 
  85   2           
  86   2          DS1=0x80&Data1;
  87   2          DS2=0x80&Data2;
  88   2          DS3=0x80&Data3;
  89   2          DS4=0x80&Data4;
  90   2          DS5=0x80&Data5;
  91   2      
  92   2           
  93   2          Data1=_crol_(Data1,1); 
  94   2          Data2=_crol_(Data2,1); 
  95   2          Data3=_crol_(Data3,1); 
  96   2          Data4=_crol_(Data4,1); 
  97   2          Data5=_crol_(Data5,1); 
  98   2      
  99   2       
 100   2          SH_CP2 = 1;          
 101   2          _nop_();
 102   2       
 103   2        }    
 104   1         
 105   1         ST_CP2 = 1;         
 106   1         ST_CP2 = 0;
 107   1        
 108   1         _nop_();
 109   1         _nop_();
 110   1        
 111   1        
 112   1            delay(400);
 113   1      
 114   1      }
 115          void move(int *pup1,int *pup2,int *pup3,int *pdown1,int *pdown2,int *pdown3,unsigned char *pe1,unsigned ch
             -ar *pe2,unsigned char *pe3,int *pElevator1,int *pElevator2,int *pElevator3){
C51 COMPILER V9.60.0.0   THREEELEVATOR                                                     05/10/2020 17:38:04 PAGE 3   

 116   1        int f;
 117   1        bit flag;
 118   1        /*-----Elevator1--------*/
 119   1        //Ascent
 120   1        if(*pup1){
 121   2          f=7;flag=1;
 122   2          //Move
 123   2          while(f>*pElevator1){
 124   3            //Inside
 125   3            if(*pe1&(1<<f)){flag=0;(*pElevator1)++;break;}
 126   3            //Up
 127   3            if(up&(1<<f)){
 128   4              //Elevator2
 129   4              if((f+1)%2!=0){
 130   5                if(*pdown2||*pElevator2<=*pElevator1||*pElevator2>f){flag=0;(*pElevator1)++;break;}
 131   5              }
 132   4              //Elevator3
 133   4              else{
 134   5                if(*pdown3||*pElevator3<=*pElevator1||*pElevator3>f){flag=0;(*pElevator1)++;break;}
 135   5              }
 136   4            }
 137   3            //Down
 138   3            if(down&(1<<f)){
 139   4              if((f+1)%2!=0){
 140   5                if(*pdown2||*pElevator2<=*pElevator1||*pElevator2>f){flag=0;(*pElevator1)++;break;}
 141   5              }
 142   4              else{
 143   5                if(*pdown3||*pElevator3<=*pElevator1||*pElevator3>f){flag=0;(*pElevator1)++;break;}
 144   5              }
 145   4            }
 146   3            f--;
 147   3          }
 148   2          //Reached
 149   2          if(flag)*pup1=0;
 150   2          //Reset the value of variates
 151   2          else{
 152   3            if(*pElevator1==f){
 153   4              up=up&((1<<f)^255);
 154   4              down=down&((1<<f)^255);
 155   4              *pe1=*pe1&((1<<f)^255);
 156   4            }
 157   3            else{
 158   4              up=up&((1<<*pElevator1)^255);
 159   4              *pe1=*pe1&((1<<*pElevator1)^255);
 160   4            }
 161   3          }
 162   2        }
 163   1        //Descent
 164   1        else if(*pdown1){
 165   2          f=0;flag=1;
 166   2          //Move
 167   2          while(f<*pElevator1){
 168   3            //Inside
 169   3            if(*pe1&(1<<f)){flag=0;(*pElevator1)--;break;}
 170   3            //Down
 171   3            if(down&(1<<f)){
 172   4              //Elevator2
 173   4              if((f+1)%2!=0){
 174   5                if(*pup2||*pElevator2>=*pElevator1||*pElevator2<f){flag=0;(*pElevator1)--;break;}
 175   5              }
 176   4              //Elevator3
 177   4              else{
C51 COMPILER V9.60.0.0   THREEELEVATOR                                                     05/10/2020 17:38:04 PAGE 4   

 178   5                if(*pup3||*pElevator3>=*pElevator1||*pElevator3<f){flag=0;(*pElevator1)--;break;}
 179   5              }
 180   4      
 181   4            }
 182   3            //Up
 183   3            if(up&(1<<f)){
 184   4              //Elevator2
 185   4              if((f+1)%2!=0){
 186   5                if(*pup2||*pElevator2>=*pElevator1||*pElevator2<f){flag=0;(*pElevator1)--;break;}
 187   5              }
 188   4              //Elevator3
 189   4              else{
 190   5                if(*pup3||*pElevator3>=*pElevator1||*pElevator3<f){flag=0;(*pElevator1)--;break;}
 191   5              }
 192   4            }
 193   3            f++;
 194   3          }
 195   2          //Reached
 196   2          if(flag)*pdown1=0;
 197   2          //Reset the value of variates
 198   2          else{
 199   3            if(*pElevator1==f){
 200   4              up=up&((1<<f)^255);
 201   4              down=down&((1<<f)^255);
 202   4              *pe1=*pe1&((1<<f)^255);
 203   4            }
 204   3            else{
 205   4              down=down&((1<<*pElevator1)^255);
 206   4              *pe1=*pe1&((1<<*pElevator1)^255);
 207   4            }
 208   3          }
 209   2        }
 210   1        //Static
 211   1        else{
 212   2          f=7;
 213   2          while(f>=0){
 214   3            if(f>*pElevator1){
 215   4              if(*pe1&(1<<f)){*pup1=1;break;}
 216   4              if(up&(1<<f)){
 217   5                if((f+1)%2!=0){
 218   6                  if(*pdown2&&*pElevator2<f||*pElevator2<*pElevator1||*pElevator2==*pElevator1&&!*pup2||*pElevator2>f&
             -&*pElevator2-f>=f-*pElevator1){*pup1=1;break;}
 219   6                }
 220   5                else{
 221   6                  if(*pdown3&&*pElevator3<f||*pElevator3<*pElevator1||*pElevator3==*pElevator1&&!*pup3||*pElevator3>f&
             -&*pElevator3-f>=f-*pElevator1){*pup1=1;break;}
 222   6                }
 223   5                
 224   5              }
 225   4              if(down&(1<<f)){
 226   5                if((f+1)%2!=0){
 227   6                  if(*pup2&&*pElevator2>f||*pElevator2<*pElevator1||*pElevator2==*pElevator1&&!*pup2||*pElevator2>f&&*
             -pElevator2-f>=f-*pElevator1){*pup1=1;break;}
 228   6                }
 229   5                else{
 230   6                  if(*pup3&&*pElevator3>f||*pElevator3<*pElevator1||*pElevator3==*pElevator1&&!*pup3||*pElevator3>f&&*
             -pElevator3-f>=f-*pElevator1){*pup1=1;break;}
 231   6                }
 232   5              }
 233   4            }
 234   3            else if(f<*pElevator1){
 235   4              if(*pe1&(1<<f)){*pdown1=1;break;}
C51 COMPILER V9.60.0.0   THREEELEVATOR                                                     05/10/2020 17:38:04 PAGE 5   

 236   4              if(down&(1<<f)){
 237   5                if((f+1)%2!=0){
 238   6                  if(*pup2&&*pElevator2>f||*pElevator2>*pElevator1||*pElevator2==*pElevator1&&!*pdown2||*pElevator2<f&
             -&*pElevator1-f<=f-*pElevator2){*pdown1=1;break;}
 239   6                }
 240   5                else{
 241   6                  if(*pup3&&*pElevator3>f||*pElevator3>*pElevator1||*pElevator3==*pElevator1&&!*pdown3||*pElevator3<f&
             -&*pElevator1-f<=f-*pElevator3){*pdown1=1;break;}
 242   6                }
 243   5                
 244   5              }
 245   4              if(up&(1<<f)){
 246   5                if((f+1)%2!=0){
 247   6                  if(*pdown2&&*pElevator2<f||*pElevator2>*pElevator1||*pElevator2==*pElevator1&&!*pdown2||*pElevator2<
             -f&&*pElevator1-f<=f-*pElevator2){*pdown1=1;break;}
 248   6                }
 249   5                else{
 250   6                  if(*pdown3&&*pElevator3<f||*pElevator3>*pElevator1||*pElevator3==*pElevator1&&!*pdown3||*pElevator3<
             -f&&*pElevator1-f<=f-*pElevator3){*pdown1=1;break;}
 251   6                }
 252   5                      
 253   5              }
 254   4            }
 255   3            else{
 256   4              up=up&((1<<f)^255);
 257   4              down=down&((1<<f)^255);
 258   4              *pe1=*pe1&((1<<f)^255);
 259   4            }
 260   3            f--;
 261   3          }
 262   2        }
 263   1      
 264   1        
 265   1        
 266   1        /*------Elevator2----------*/
 267   1        if(*pup2){
 268   2          f=7;flag=1;
 269   2          while(f>*pElevator2){
 270   3            if(*pe2&(1<<f)){flag=0;(*pElevator2)++;break;}
 271   3            if((f+1)%2!=0)
 272   3            {
 273   4              if(up&(1<<f)){
 274   5                  if(*pdown1||*pElevator1<=*pElevator2||*pElevator1>f){flag=0;(*pElevator2)++;break;}
 275   5              }
 276   4              if(down&(1<<f)){
 277   5                  if(*pdown1||*pElevator1<=*pElevator2||*pElevator1>f){flag=0;(*pElevator2)++;break;}
 278   5              }       
 279   4            }
 280   3      
 281   3            f--;
 282   3          }
 283   2          if(flag)*pup2=0;
 284   2          else{
 285   3            if(*pElevator2==f){
 286   4              up=up&((1<<f)^255);
 287   4              down=down&((1<<f)^255);
 288   4              *pe2=*pe2&((1<<f)^255);
 289   4            }
 290   3            else{
 291   4              up=up&((1<<*pElevator2)^255);
 292   4              *pe2=*pe2&((1<<*pElevator2)^255);
 293   4            }
C51 COMPILER V9.60.0.0   THREEELEVATOR                                                     05/10/2020 17:38:04 PAGE 6   

 294   3          }
 295   2        }
 296   1        else if(*pdown2){
 297   2          f=0;flag=1;
 298   2          while(f<*pElevator2){
 299   3            if(*pe2&(1<<f)){flag=0;(*pElevator2)--;break;}
 300   3            if((f+1)%2!=0){
 301   4              if(down&(1<<f)){
 302   5                if(*pup1||*pElevator1>=*pElevator2||*pElevator1<f){flag=0;(*pElevator2)--;break;}
 303   5              }
 304   4              if(up&(1<<f)){
 305   5                if(*pup1||*pElevator1>=*pElevator2||*pElevator1<f){flag=0;(*pElevator2)--;break;}
 306   5              } 
 307   4            }
 308   3            f++;
 309   3          }
 310   2          if(flag)*pdown2=0;
 311   2          else{
 312   3            if(*pElevator2==f){
 313   4              up=up&((1<<f)^255);
 314   4              down=down&((1<<f)^255);
 315   4              *pe2=*pe2&((1<<f)^255);
 316   4            }
 317   3            else{
 318   4              down=down&((1<<*pElevator2)^255);
 319   4              *pe2=*pe2&((1<<*pElevator2)^255);
 320   4            }
 321   3          }
 322   2        }
 323   1        else{
 324   2          f=7;
 325   2          while(f>=0){
 326   3            if(f>*pElevator2){
 327   4              if(*pe2&(1<<f)){*pup2=1;break;}
 328   4              if((f+1)%2!=0){
 329   5                if(up&(1<<f)){
 330   6                  if(*pdown1&&*pElevator1<f||*pElevator1<*pElevator2||*pElevator1==*pElevator2&&!*pup1||*pElevator1>f&
             -&*pElevator1-f>f-*pElevator2){*pup2=1;break;}
 331   6      
 332   6                }
 333   5                if(down&(1<<f)){
 334   6                  if(*pup1&&*pElevator1>f||*pElevator1<*pElevator2||*pElevator1==*pElevator2&&!*pup1||*pElevator1>f&&*
             -pElevator1-f>f-*pElevator2){*pup2=1;break;}
 335   6                }
 336   5              }
 337   4            }
 338   3            else if(f<*pElevator2){
 339   4              if(*pe2&(1<<f)){*pdown2=1;break;}
 340   4              if((f+1)%2!=0){
 341   5                if(down&(1<<f)){
 342   6                  if(*pup1&&*pElevator1>f||*pElevator1>*pElevator2||*pElevator1==*pElevator2&&!*pdown1||*pElevator1<f&
             -&*pElevator2-f<f-*pElevator1){*pdown2=1;break;}
 343   6                }
 344   5                if(up&(1<<f)){
 345   6                  if(*pdown1&&*pElevator1<f||*pElevator1>*pElevator2||*pElevator1==*pElevator2&&!*pdown1||*pElevator1<
             -f&&*pElevator2-f<f-*pElevator1){*pdown2=1;break;}
 346   6                }
 347   5              }
 348   4            }
 349   3            else{
 350   4              up=up&((1<<f)^255);
 351   4              down=down&((1<<f)^255);
C51 COMPILER V9.60.0.0   THREEELEVATOR                                                     05/10/2020 17:38:04 PAGE 7   

 352   4              *pe2=*pe2&((1<<f)^255);
 353   4            }
 354   3            f--;
 355   3          }
 356   2        }
 357   1          
 358   1          /*------Elevator3----------*/
 359   1        if(*pup3){
 360   2          f=7;flag=1;
 361   2          while(f>*pElevator3){
 362   3            if(*pe3&(1<<f)){flag=0;(*pElevator3)++;break;}
 363   3            if((f+1)%2==0||f==0){
 364   4              if(up&(1<<f)){
 365   5                  if(*pdown1||*pElevator1<=*pElevator3||*pElevator1>f){flag=0;(*pElevator3)++;break;}
 366   5              }
 367   4              if(down&(1<<f)){
 368   5                  if(*pdown1||*pElevator1<=*pElevator3||*pElevator1>f){flag=0;(*pElevator3)++;break;}
 369   5              }
 370   4            }
 371   3            f--;
 372   3          }
 373   2          if(flag)*pup3=0;
 374   2          else{
 375   3            if(*pElevator3==f){
 376   4              up=up&((1<<f)^255);
 377   4              down=down&((1<<f)^255);
 378   4              *pe3=*pe3&((1<<f)^255);
 379   4            }
 380   3            else{
 381   4              up=up&((1<<*pElevator3)^255);
 382   4              *pe3=*pe3&((1<<*pElevator3)^255);
 383   4            }
 384   3          }
 385   2        }
 386   1        else if(*pdown3){
 387   2          f=0;flag=1;
 388   2          while(f<*pElevator3){
 389   3            if(*pe3&(1<<f)){flag=0;(*pElevator3)--;break;}
 390   3            if((f+1)%2==0||f==0){
 391   4              if(down&(1<<f)){
 392   5                if(*pup1||*pElevator1>=*pElevator3||*pElevator1<f){flag=0;(*pElevator3)--;break;}
 393   5              }
 394   4              if(up&(1<<f)){
 395   5                if(*pup1||*pElevator1>=*pElevator3||*pElevator1<f){flag=0;(*pElevator3)--;break;}
 396   5              }
 397   4            }
 398   3            f++;
 399   3          }
 400   2          if(flag)*pdown3=0;
 401   2          else{
 402   3            if(*pElevator3==f){
 403   4              up=up&((1<<f)^255);
 404   4              down=down&((1<<f)^255);
 405   4              *pe3=*pe3&((1<<f)^255);
 406   4            }
 407   3            else{
 408   4              down=down&((1<<*pElevator3)^255);
 409   4              *pe3=*pe3&((1<<*pElevator3)^255);
 410   4            }
 411   3          }
 412   2        }
 413   1        else{
C51 COMPILER V9.60.0.0   THREEELEVATOR                                                     05/10/2020 17:38:04 PAGE 8   

 414   2          f=7;
 415   2          while(f>=0){
 416   3            if(f>*pElevator3){
 417   4              if(*pe3&(1<<f)){*pup3=1;break;}
 418   4              if((f+1)%2==0||f==0){
 419   5                if(up&(1<<f)){
 420   6                  if(*pdown1&&*pElevator1<f||*pElevator1<*pElevator3||*pElevator1==*pElevator3&&!*pup1||*pElevator1>f&
             -&*pElevator1-f>f-*pElevator3){*pup3=1;break;}
 421   6      
 422   6                }
 423   5                if(down&(1<<f)){
 424   6                  if(*pup1&&*pElevator1>f||*pElevator1<*pElevator3||*pElevator1==*pElevator3&&!*pup1||*pElevator1>f&&*
             -pElevator1-f>f-*pElevator3){*pup3=1;break;}
 425   6                }
 426   5              }
 427   4            }
 428   3            else if(f<*pElevator3){
 429   4              if(*pe3&(1<<f)){*pdown3=1;break;}
 430   4              if((f+1)%2==0||f==0){       
 431   5                if(down&(1<<f)){
 432   6                  if(*pup1&&*pElevator1>f||*pElevator1>*pElevator3||*pElevator1==*pElevator3&&!*pdown1||*pElevator1<f&
             -&*pElevator3-f<f-*pElevator1){*pdown3=1;break;}
 433   6                }
 434   5                if(up&(1<<f)){
 435   6                  if(*pdown1&&*pElevator1<f||*pElevator1>*pElevator3|*pElevator1==*pElevator3&&!*pdown1||*pElevator1<f
             -&&*pElevator3-f<f-*pElevator1){*pdown3=1;break;}
 436   6                }
 437   5              }
 438   4            }
 439   3            else{
 440   4              up=up&((1<<f)^255);
 441   4              down=down&((1<<f)^255);
 442   4              *pe3=*pe3&((1<<f)^255);
 443   4            }
 444   3            f--;
 445   3          }
 446   2        }
 447   1          
 448   1        
 449   1        
 450   1      }
 451          void main(){
 452   1        int i;
 453   1        bit push=1;
 454   1      
 455   1        display_elevator();
 456   1        while(1){
 457   2            i=0;
 458   2            ST_CP2 = 0;
 459   2            P37 = 1;
 460   2          
 461   2          while(i<120){
 462   3            if((p13&p17&p20&p24&P37)^push){
 463   4              if(push){
 464   5                push=0;
 465   5                if(!p17){
 466   6                  up=up|(1<<(p14|p15*2|p16*4))&0x7f;
 467   6                }
 468   5                if(!p13){
 469   6                  down=down|(1<<(p10|p11*2|p12*4))&0xfe;
 470   6                }
 471   5                if(!p20){
C51 COMPILER V9.60.0.0   THREEELEVATOR                                                     05/10/2020 17:38:04 PAGE 9   

 472   6                  e1=e1|(1<<(p23|p22*2|p21*4));
 473   6                }
 474   5                if(!p24){
 475   6                  e2ae3 = (1<<(p27|p26*2|p25*4));
 476   6                  if((e2ae3&0x55)!=0)
 477   6                  {
 478   7                    e2 = e2|e2ae3;
 479   7                  }
 480   6                  else
 481   6                  {
 482   7                    e3 = e3|e2ae3;
 483   7                  }
 484   6      
 485   6                }
 486   5                if(!P37)
 487   5                {
 488   6                  e3 = e3|0x01;
 489   6                }
 490   5              }
 491   4              else{
 492   5                push=1;
 493   5              }
 494   4            }
 495   3            i++;
 496   3            display_LED();
 497   3          }
 498   2          
 499   2          move(&up1,&up2,&up3,&down1,&down2,&down3,&e1,&e2,&e3,&Elevator1,&Elevator2,&Elevator3);
 500   2      
 501   2          
 502   2      
 503   2          display_elevator();
 504   2        }
 505   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   7477    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     24      42
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
